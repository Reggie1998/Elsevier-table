[{"C:\\Users\\Reggie\\Code\\elsevier-table\\src\\index.tsx":"1","C:\\Users\\Reggie\\Code\\elsevier-table\\src\\App.tsx":"2","C:\\Users\\Reggie\\Code\\elsevier-table\\src\\components\\TableComponent.tsx":"3","C:\\Users\\Reggie\\Code\\elsevier-table\\src\\reportWebVitals.js":"4"},{"size":500,"mtime":499162500000,"results":"5","hashOfConfig":"6"},{"size":271,"mtime":1607524825453,"results":"7","hashOfConfig":"6"},{"size":4225,"mtime":1608648108836,"results":"8","hashOfConfig":"6"},{"size":362,"mtime":1607524823384,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"18gip17",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\Reggie\\Code\\elsevier-table\\src\\index.tsx",[],["21","22"],"C:\\Users\\Reggie\\Code\\elsevier-table\\src\\App.tsx",[],"C:\\Users\\Reggie\\Code\\elsevier-table\\src\\components\\TableComponent.tsx",["23"],"import React, { useState, useEffect } from \"react\";\r\nimport \"./TableComponent.css\";\r\n\r\ninterface Person {\r\n  id: string;\r\n  name: string;\r\n  gender: string;\r\n  company: string;\r\n  email: string;\r\n  isActive: boolean;\r\n  picture: string;\r\n}\r\n\r\nconst TableComponent: React.FunctionComponent<{ people: Person[] }> = (props: {\r\n  people: Person[];\r\n}) => {\r\n  const [people, setPeople] = useState<Person[]>(props.people);\r\n  const [sortState, setSortState] = useState<string>(\"None\");\r\n  const [filterInput, setFilterInput] = useState<string>(\"\");\r\n\r\n  let peopleArray: Person[] = props.people;\r\n\r\n  //delaying input update(900ms)\r\n  useEffect(() => {\r\n    const delayDebounce = setTimeout(() => {\r\n      inputFilterMethod();\r\n    }, 900);\r\n    return () => clearTimeout(delayDebounce);\r\n  }, [filterInput]);\r\n\r\n  // Input filtering method\r\n  const inputFilterMethod = () => {\r\n    if (filterInput.toLowerCase() !== \"male\") {\r\n      let newArray = [...peopleArray].filter(\r\n        (p) =>\r\n          p.name.toLowerCase().includes(filterInput.toLowerCase()) ||\r\n          p.company.toLowerCase().includes(filterInput.toLowerCase()) ||\r\n          p.email.toLowerCase().includes(filterInput.toLowerCase()) ||\r\n          p.gender.toLowerCase().includes(filterInput.toLowerCase())\r\n      );\r\n      setPeople(newArray);\r\n    }\r\n    // This exists so that if you search \"male\" you will sort only males since the string is also inside the word \"fe(male)\"\r\n    // Checking through every value incase someone has \"Male\" in their name, email etc (Name: \"(Male)ina Manning\" in json as example)\r\n    else {\r\n      let newArray = [...peopleArray].filter(\r\n        (p) =>\r\n          p.name.toLowerCase().includes(filterInput.toLowerCase()) ||\r\n          p.company.toLowerCase().includes(filterInput.toLowerCase()) ||\r\n          p.email.toLowerCase().includes(filterInput.toLowerCase()) ||\r\n          p.gender.toLowerCase() === filterInput.toLowerCase()\r\n      );\r\n      setPeople(newArray);\r\n    }\r\n  };\r\n\r\n  // Sorting method\r\n  const sortTable = (propName: keyof Person) => {\r\n    if (sortState === \"None\" || sortState === \"Ascending\") {\r\n      let newArray = [...people].sort((a, b) =>\r\n        a[propName] > b[propName] ? 1 : -1\r\n      );\r\n      setSortState(\"Descending\");\r\n      setPeople(newArray);\r\n    } else {\r\n      let newArray = [...people].sort((a, b) =>\r\n        a[propName] < b[propName] ? 1 : -1\r\n      );\r\n      setSortState(\"Ascending\");\r\n      setPeople(newArray);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"input-div\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"custom-input\"\r\n          value={filterInput}\r\n          onChange={(e) => setFilterInput(e.target.value)}\r\n          placeholder=\"Filter table\"\r\n        ></input>\r\n      </div>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th onClick={() => sortTable(\"name\")}>\r\n              Full Name{\" \"}\r\n              <button className=\"custom-button\">\r\n                <i className=\"fas fa-sort fa-lg\"></i>\r\n              </button>\r\n            </th>\r\n            <th onClick={() => sortTable(\"email\")} className=\"border-th\">\r\n              Email{\" \"}\r\n              <button className=\"custom-button\">\r\n                <i className=\"fas fa-sort fa-lg\"></i>\r\n              </button>\r\n            </th>\r\n            <th onClick={() => sortTable(\"company\")} className=\"border-th\">\r\n              Company{\" \"}\r\n              <button className=\"custom-button\">\r\n                <i className=\"fas fa-sort fa-lg\"></i>\r\n              </button>\r\n            </th>\r\n            <th onClick={() => sortTable(\"gender\")}>\r\n              Gender{\" \"}\r\n              <button className=\"custom-button\">\r\n                <i className=\"fas fa-sort fa-lg\"></i>\r\n              </button>\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {people.map((person: Person) => (\r\n            <tr key={person.id}>\r\n              <td>{person.name}</td>\r\n              <td>{person.email}</td>\r\n              <td>{person.company}</td>\r\n              <td>{person.gender}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TableComponent;\r\n","C:\\Users\\Reggie\\Code\\elsevier-table\\src\\reportWebVitals.js",[],["24","25"],{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","severity":1,"message":"31","line":29,"column":6,"nodeType":"32","endLine":29,"endColumn":19,"suggestions":"33"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},"no-native-reassign",["34"],"no-negated-in-lhs",["35"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'inputFilterMethod'. Either include it or remove the dependency array.","ArrayExpression",["36"],"no-global-assign","no-unsafe-negation",{"desc":"37","fix":"38"},"Update the dependencies array to be: [filterInput, inputFilterMethod]",{"range":"39","text":"40"},[789,802],"[filterInput, inputFilterMethod]"]